---
features:
  - |
    Adds expectation value measurement error mitigation to the mitigation module.
    This supports using *complete* N-qubit assignment matrix, single-qubit
    *tensored* assignment matrix, or *continuous time Markov process (CTMP)* [1]
    measurement error mitigation when computing expectation values of diagonal
    operators from counts dictionaries. Expectation values are computed using
    the using the :func:`qiskit.ignis.mitigation.expectation_value` function.

    Calibration circuits for calibrating a measurement error mitigator are
    generated using the :func:`qiskit.ignis.mitigation.expval_meas_mitigator_circuits`
    function, and the result fitted using the
    :class:`qiskit.ignis.mitigation.ExpvalMeasMitigatorFitter` class. The
    fitter returns a mitigator object can the be supplied as an argument to the
    :func:`~qiskit.ignis.mitigation.expectation_value` function to apply mitigation.

    [1] S Bravyi, S Sheldon, A Kandala, DC Mckay, JM Gambetta,
        *Mitigating measurement errors in multi-qubit experiments*,
        arXiv:2006.14044 [quant-ph].

    Example:

        The following example shows calibrating a 5-qubit expectation value
        measurement error mitigator using the ``'tensored'`` method.

        .. jupyter-execute::

            from qiskit import execute
            from qiskit.test.mock import FakeVigo
            import qiskit.ignis.mitigation as mit

            backend = FakeVigo()
            num_qubits = backend.configuration().num_qubits

            # Generate calibration circuits
            circuits, metadata = mit.expval_meas_mitigator_circuits(
                num_qubits, method='tensored')
            result = execute(circuits, backend, shots=8192).result()

            # Fit mitigator
            mitigator = mit.ExpvalMeasMitigatorFitter(result, metadata).fit()

            # Plot fitted N-qubit assignment matrix
            mitigator.plot_assignment_matrix()

        The following shows how to use the above mitigator to apply measurement
        error mitigation to expectation value computations

        .. jupyter-execute::

            from qiskit import QuantumCircuit

            # Test Circuit with expectation value -1.
            qc = QuantumCircuit(num_qubits)
            qc.x(range(num_qubits))
            qc.measure_all()

            # Execute
            shots = 8192
            seed_simulator = 1999
            result = execute(qc, backend, shots=8192, seed_simulator=1999).result()
            counts = result.get_counts(0)

            # Expectation value of Z^N without mitigation
            expval_nomit, error_nomit = mit.expectation_value(counts)
            print('Expval (no mitigation): {:.2f} \u00B1 {:.2f}'.format(
                expval_nomit, error_nomit))

            # Expectation value of Z^N with mitigation
            expval_mit, error_mit = mit.expectation_value(counts,
                meas_mitigator=mitigator)
            print('Expval (with mitigation): {:.2f} \u00B1 {:.2f}'.format(
                expval_mit, error_mit))
  - |
    Adds Numba as an optional dependency. Numba is used to significantly increase
    the performance of the :class:`qiskit.ignis.mitigation.CTMPExpvalMeasMitigator`
    class used for expectation value measurement error mitigation with the CTMP
    method.
